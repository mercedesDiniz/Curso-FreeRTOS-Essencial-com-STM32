
l476rg_hard_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001874  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080019fc  080019fc  000029fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a44  08001a44  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a44  08001a44  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a44  08001a44  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a44  08001a44  00002a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a48  08001a48  00002a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a4c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001a58  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001a58  00003078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000955e  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169f  00000000  00000000  0000c59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0000dc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000865  00000000  00000000  0000e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251ea  00000000  00000000  0000ef8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4cd  00000000  00000000  00034177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8e89  00000000  00000000  0003f644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001284cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cec  00000000  00000000  00128510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0012b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080019e4 	.word	0x080019e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080019e4 	.word	0x080019e4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f976 	bl	80004bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f802 	bl	80001d8 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d4:	bf00      	nop
 80001d6:	e7fd      	b.n	80001d4 <main+0xc>

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b096      	sub	sp, #88	@ 0x58
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	2244      	movs	r2, #68	@ 0x44
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fbd0 	bl	800198c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	463b      	mov	r3, r7
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80001fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80001fe:	f000 fa8d 	bl	800071c <HAL_PWREx_ControlVoltageScaling>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000208:	f000 f84a 	bl	80002a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020c:	2302      	movs	r3, #2
 800020e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000214:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000216:	2310      	movs	r3, #16
 8000218:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2302      	movs	r3, #2
 800021c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800021e:	2302      	movs	r3, #2
 8000220:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000222:	2301      	movs	r3, #1
 8000224:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000226:	230a      	movs	r3, #10
 8000228:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800022a:	2307      	movs	r3, #7
 800022c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800022e:	2302      	movs	r3, #2
 8000230:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000232:	2302      	movs	r3, #2
 8000234:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0314 	add.w	r3, r7, #20
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fac4 	bl	80007c8 <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000246:	f000 f82b 	bl	80002a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024e:	2303      	movs	r3, #3
 8000250:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800025e:	463b      	mov	r3, r7
 8000260:	2104      	movs	r1, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fe8c 	bl	8000f80 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800026e:	f000 f817 	bl	80002a0 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3758      	adds	r7, #88	@ 0x58
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d101      	bne.n	8000292 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800028e:	f000 f935 	bl	80004fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40012c00 	.word	0x40012c00

080002a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002a4:	b672      	cpsid	i
}
 80002a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002a8:	bf00      	nop
 80002aa:	e7fd      	b.n	80002a8 <Error_Handler+0x8>

080002ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002b2:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <HAL_MspInit+0x44>)
 80002b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002b6:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <HAL_MspInit+0x44>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80002be:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <HAL_MspInit+0x44>)
 80002c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ca:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <HAL_MspInit+0x44>)
 80002cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002ce:	4a08      	ldr	r2, [pc, #32]	@ (80002f0 <HAL_MspInit+0x44>)
 80002d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <HAL_MspInit+0x44>)
 80002d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000

080002f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08c      	sub	sp, #48	@ 0x30
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80002fc:	2300      	movs	r3, #0
 80002fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000302:	4b2e      	ldr	r3, [pc, #184]	@ (80003bc <HAL_InitTick+0xc8>)
 8000304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000306:	4a2d      	ldr	r2, [pc, #180]	@ (80003bc <HAL_InitTick+0xc8>)
 8000308:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800030c:	6613      	str	r3, [r2, #96]	@ 0x60
 800030e:	4b2b      	ldr	r3, [pc, #172]	@ (80003bc <HAL_InitTick+0xc8>)
 8000310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800031a:	f107 020c 	add.w	r2, r7, #12
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 ffd9 	bl	80012dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800032a:	f000 ffc1 	bl	80012b0 <HAL_RCC_GetPCLK2Freq>
 800032e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000332:	4a23      	ldr	r2, [pc, #140]	@ (80003c0 <HAL_InitTick+0xcc>)
 8000334:	fba2 2303 	umull	r2, r3, r2, r3
 8000338:	0c9b      	lsrs	r3, r3, #18
 800033a:	3b01      	subs	r3, #1
 800033c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800033e:	4b21      	ldr	r3, [pc, #132]	@ (80003c4 <HAL_InitTick+0xd0>)
 8000340:	4a21      	ldr	r2, [pc, #132]	@ (80003c8 <HAL_InitTick+0xd4>)
 8000342:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000344:	4b1f      	ldr	r3, [pc, #124]	@ (80003c4 <HAL_InitTick+0xd0>)
 8000346:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800034a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800034c:	4a1d      	ldr	r2, [pc, #116]	@ (80003c4 <HAL_InitTick+0xd0>)
 800034e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000350:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000352:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <HAL_InitTick+0xd0>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000358:	4b1a      	ldr	r3, [pc, #104]	@ (80003c4 <HAL_InitTick+0xd0>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <HAL_InitTick+0xd0>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000364:	4817      	ldr	r0, [pc, #92]	@ (80003c4 <HAL_InitTick+0xd0>)
 8000366:	f001 f84b 	bl	8001400 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000374:	2b00      	cmp	r3, #0
 8000376:	d11b      	bne.n	80003b0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000378:	4812      	ldr	r0, [pc, #72]	@ (80003c4 <HAL_InitTick+0xd0>)
 800037a:	f001 f8a3 	bl	80014c4 <HAL_TIM_Base_Start_IT>
 800037e:	4603      	mov	r3, r0
 8000380:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000388:	2b00      	cmp	r3, #0
 800038a:	d111      	bne.n	80003b0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800038c:	2019      	movs	r0, #25
 800038e:	f000 f9a9 	bl	80006e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2b0f      	cmp	r3, #15
 8000396:	d808      	bhi.n	80003aa <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000398:	2200      	movs	r2, #0
 800039a:	6879      	ldr	r1, [r7, #4]
 800039c:	2019      	movs	r0, #25
 800039e:	f000 f985 	bl	80006ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80003a2:	4a0a      	ldr	r2, [pc, #40]	@ (80003cc <HAL_InitTick+0xd8>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	e002      	b.n	80003b0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80003b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3730      	adds	r7, #48	@ 0x30
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	431bde83 	.word	0x431bde83
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40012c00 	.word	0x40012c00
 80003cc:	20000004 	.word	0x20000004

080003d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <NMI_Handler+0x4>

080003d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <HardFault_Handler+0x4>

080003e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <MemManage_Handler+0x4>

080003e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <BusFault_Handler+0x4>

080003f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <UsageFault_Handler+0x4>

080003f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000434:	4802      	ldr	r0, [pc, #8]	@ (8000440 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000436:	f001 f8b5 	bl	80015a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000028 	.word	0x20000028

08000444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <SystemInit+0x20>)
 800044a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800044e:	4a05      	ldr	r2, [pc, #20]	@ (8000464 <SystemInit+0x20>)
 8000450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800046c:	f7ff ffea 	bl	8000444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	@ (80004a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	@ (80004a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <LoopForever+0xe>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	@ (80004b4 <LoopForever+0x16>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000496:	f001 fa81 	bl	800199c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800049a:	f7ff fe95 	bl	80001c8 <main>

0800049e <LoopForever>:

LoopForever:
    b LoopForever
 800049e:	e7fe      	b.n	800049e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004ac:	08001a4c 	.word	0x08001a4c
  ldr r2, =_sbss
 80004b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004b4:	20000078 	.word	0x20000078

080004b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC1_2_IRQHandler>
	...

080004bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004c2:	2300      	movs	r3, #0
 80004c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <HAL_Init+0x3c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0b      	ldr	r2, [pc, #44]	@ (80004f8 <HAL_Init+0x3c>)
 80004cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f000 f8df 	bl	8000696 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0b 	bl	80002f4 <HAL_InitTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004e4:	2301      	movs	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e001      	b.n	80004ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f7ff fedf 	bl	80002ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40022000 	.word	0x40022000

080004fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <HAL_IncTick+0x20>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <HAL_IncTick+0x24>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4413      	add	r3, r2
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <HAL_IncTick+0x24>)
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000008 	.word	0x20000008
 8000520:	20000074 	.word	0x20000074

08000524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return uwTick;
 8000528:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <HAL_GetTick+0x14>)
 800052a:	681b      	ldr	r3, [r3, #0]
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000074 	.word	0x20000074

0800053c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800056c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056e:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <__NVIC_GetPriorityGrouping+0x18>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	f003 0307 	and.w	r3, r3, #7
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	db0b      	blt.n	80005ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 021f 	and.w	r2, r3, #31
 80005b8:	4907      	ldr	r1, [pc, #28]	@ (80005d8 <__NVIC_EnableIRQ+0x38>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	2001      	movs	r0, #1
 80005c2:	fa00 f202 	lsl.w	r2, r0, r2
 80005c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000e100 	.word	0xe000e100

080005dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db0a      	blt.n	8000606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	490c      	ldr	r1, [pc, #48]	@ (8000628 <__NVIC_SetPriority+0x4c>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000604:	e00a      	b.n	800061c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4908      	ldr	r1, [pc, #32]	@ (800062c <__NVIC_SetPriority+0x50>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	3b04      	subs	r3, #4
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	440b      	add	r3, r1
 800061a:	761a      	strb	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000630:	b480      	push	{r7}
 8000632:	b089      	sub	sp, #36	@ 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	f1c3 0307 	rsb	r3, r3, #7
 800064a:	2b04      	cmp	r3, #4
 800064c:	bf28      	it	cs
 800064e:	2304      	movcs	r3, #4
 8000650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3304      	adds	r3, #4
 8000656:	2b06      	cmp	r3, #6
 8000658:	d902      	bls.n	8000660 <NVIC_EncodePriority+0x30>
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3b03      	subs	r3, #3
 800065e:	e000      	b.n	8000662 <NVIC_EncodePriority+0x32>
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	f04f 32ff 	mov.w	r2, #4294967295
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	43da      	mvns	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	401a      	ands	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000678:	f04f 31ff 	mov.w	r1, #4294967295
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43d9      	mvns	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	4313      	orrs	r3, r2
         );
}
 800068a:	4618      	mov	r0, r3
 800068c:	3724      	adds	r7, #36	@ 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ff4c 	bl	800053c <__NVIC_SetPriorityGrouping>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006be:	f7ff ff61 	bl	8000584 <__NVIC_GetPriorityGrouping>
 80006c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	68b9      	ldr	r1, [r7, #8]
 80006c8:	6978      	ldr	r0, [r7, #20]
 80006ca:	f7ff ffb1 	bl	8000630 <NVIC_EncodePriority>
 80006ce:	4602      	mov	r2, r0
 80006d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff80 	bl	80005dc <__NVIC_SetPriority>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff54 	bl	80005a0 <__NVIC_EnableIRQ>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <HAL_PWREx_GetVoltageRange+0x18>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40007000 	.word	0x40007000

0800071c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800072a:	d130      	bne.n	800078e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800072c:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000738:	d038      	beq.n	80007ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800073a:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000742:	4a1e      	ldr	r2, [pc, #120]	@ (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000744:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000748:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2232      	movs	r2, #50	@ 0x32
 8000750:	fb02 f303 	mul.w	r3, r2, r3
 8000754:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000756:	fba2 2303 	umull	r2, r3, r2, r3
 800075a:	0c9b      	lsrs	r3, r3, #18
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000760:	e002      	b.n	8000768 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3b01      	subs	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000774:	d102      	bne.n	800077c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f2      	bne.n	8000762 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000788:	d110      	bne.n	80007ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800078a:	2303      	movs	r3, #3
 800078c:	e00f      	b.n	80007ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800079a:	d007      	beq.n	80007ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80007a4:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80007a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40007000 	.word	0x40007000
 80007c0:	20000000 	.word	0x20000000
 80007c4:	431bde83 	.word	0x431bde83

080007c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e3ca      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007da:	4b97      	ldr	r3, [pc, #604]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	f003 030c 	and.w	r3, r3, #12
 80007e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007e4:	4b94      	ldr	r3, [pc, #592]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f000 80e4 	beq.w	80009c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d007      	beq.n	8000812 <HAL_RCC_OscConfig+0x4a>
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	2b0c      	cmp	r3, #12
 8000806:	f040 808b 	bne.w	8000920 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	2b01      	cmp	r3, #1
 800080e:	f040 8087 	bne.w	8000920 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000812:	4b89      	ldr	r3, [pc, #548]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	2b00      	cmp	r3, #0
 800081c:	d005      	beq.n	800082a <HAL_RCC_OscConfig+0x62>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e3a2      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6a1a      	ldr	r2, [r3, #32]
 800082e:	4b82      	ldr	r3, [pc, #520]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	2b00      	cmp	r3, #0
 8000838:	d004      	beq.n	8000844 <HAL_RCC_OscConfig+0x7c>
 800083a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000842:	e005      	b.n	8000850 <HAL_RCC_OscConfig+0x88>
 8000844:	4b7c      	ldr	r3, [pc, #496]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800084a:	091b      	lsrs	r3, r3, #4
 800084c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000850:	4293      	cmp	r3, r2
 8000852:	d223      	bcs.n	800089c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6a1b      	ldr	r3, [r3, #32]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fd71 	bl	8001340 <RCC_SetFlashLatencyFromMSIRange>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	e383      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000868:	4b73      	ldr	r3, [pc, #460]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a72      	ldr	r2, [pc, #456]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b70      	ldr	r3, [pc, #448]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6a1b      	ldr	r3, [r3, #32]
 8000880:	496d      	ldr	r1, [pc, #436]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000882:	4313      	orrs	r3, r2
 8000884:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000886:	4b6c      	ldr	r3, [pc, #432]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	4968      	ldr	r1, [pc, #416]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000896:	4313      	orrs	r3, r2
 8000898:	604b      	str	r3, [r1, #4]
 800089a:	e025      	b.n	80008e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800089c:	4b66      	ldr	r3, [pc, #408]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a65      	ldr	r2, [pc, #404]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b63      	ldr	r3, [pc, #396]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a1b      	ldr	r3, [r3, #32]
 80008b4:	4960      	ldr	r1, [pc, #384]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80008ba:	4b5f      	ldr	r3, [pc, #380]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	495b      	ldr	r1, [pc, #364]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80008ca:	4313      	orrs	r3, r2
 80008cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d109      	bne.n	80008e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a1b      	ldr	r3, [r3, #32]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fd31 	bl	8001340 <RCC_SetFlashLatencyFromMSIRange>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e343      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80008e8:	f000 fc4a 	bl	8001180 <HAL_RCC_GetSysClockFreq>
 80008ec:	4602      	mov	r2, r0
 80008ee:	4b52      	ldr	r3, [pc, #328]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	4950      	ldr	r1, [pc, #320]	@ (8000a3c <HAL_RCC_OscConfig+0x274>)
 80008fa:	5ccb      	ldrb	r3, [r1, r3]
 80008fc:	f003 031f 	and.w	r3, r3, #31
 8000900:	fa22 f303 	lsr.w	r3, r2, r3
 8000904:	4a4e      	ldr	r2, [pc, #312]	@ (8000a40 <HAL_RCC_OscConfig+0x278>)
 8000906:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000908:	4b4e      	ldr	r3, [pc, #312]	@ (8000a44 <HAL_RCC_OscConfig+0x27c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fcf1 	bl	80002f4 <HAL_InitTick>
 8000912:	4603      	mov	r3, r0
 8000914:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d052      	beq.n	80009c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	e327      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d032      	beq.n	800098e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000928:	4b43      	ldr	r3, [pc, #268]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a42      	ldr	r2, [pc, #264]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000934:	f7ff fdf6 	bl	8000524 <HAL_GetTick>
 8000938:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800093a:	e008      	b.n	800094e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800093c:	f7ff fdf2 	bl	8000524 <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b02      	cmp	r3, #2
 8000948:	d901      	bls.n	800094e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800094a:	2303      	movs	r3, #3
 800094c:	e310      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800094e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0f0      	beq.n	800093c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800095a:	4b37      	ldr	r3, [pc, #220]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a36      	ldr	r2, [pc, #216]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	4b34      	ldr	r3, [pc, #208]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	4931      	ldr	r1, [pc, #196]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000974:	4313      	orrs	r3, r2
 8000976:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000978:	4b2f      	ldr	r3, [pc, #188]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	492c      	ldr	r1, [pc, #176]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000988:	4313      	orrs	r3, r2
 800098a:	604b      	str	r3, [r1, #4]
 800098c:	e01a      	b.n	80009c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800098e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a29      	ldr	r2, [pc, #164]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800099a:	f7ff fdc3 	bl	8000524 <HAL_GetTick>
 800099e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80009a0:	e008      	b.n	80009b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009a2:	f7ff fdbf 	bl	8000524 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d901      	bls.n	80009b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80009b0:	2303      	movs	r3, #3
 80009b2:	e2dd      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f0      	bne.n	80009a2 <HAL_RCC_OscConfig+0x1da>
 80009c0:	e000      	b.n	80009c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d074      	beq.n	8000aba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	2b08      	cmp	r3, #8
 80009d4:	d005      	beq.n	80009e2 <HAL_RCC_OscConfig+0x21a>
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2b0c      	cmp	r3, #12
 80009da:	d10e      	bne.n	80009fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d10b      	bne.n	80009fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d064      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x2f0>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d160      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e2ba      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a02:	d106      	bne.n	8000a12 <HAL_RCC_OscConfig+0x24a>
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e026      	b.n	8000a60 <HAL_RCC_OscConfig+0x298>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000a1a:	d115      	bne.n	8000a48 <HAL_RCC_OscConfig+0x280>
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000a22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a02      	ldr	r2, [pc, #8]	@ (8000a38 <HAL_RCC_OscConfig+0x270>)
 8000a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	e014      	b.n	8000a60 <HAL_RCC_OscConfig+0x298>
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	080019fc 	.word	0x080019fc
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000004 	.word	0x20000004
 8000a48:	4ba0      	ldr	r3, [pc, #640]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a9f      	ldr	r2, [pc, #636]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b9d      	ldr	r3, [pc, #628]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a9c      	ldr	r2, [pc, #624]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d013      	beq.n	8000a90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a68:	f7ff fd5c 	bl	8000524 <HAL_GetTick>
 8000a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a6e:	e008      	b.n	8000a82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a70:	f7ff fd58 	bl	8000524 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b64      	cmp	r3, #100	@ 0x64
 8000a7c:	d901      	bls.n	8000a82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e276      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a82:	4b92      	ldr	r3, [pc, #584]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f0      	beq.n	8000a70 <HAL_RCC_OscConfig+0x2a8>
 8000a8e:	e014      	b.n	8000aba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a90:	f7ff fd48 	bl	8000524 <HAL_GetTick>
 8000a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a96:	e008      	b.n	8000aaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a98:	f7ff fd44 	bl	8000524 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b64      	cmp	r3, #100	@ 0x64
 8000aa4:	d901      	bls.n	8000aaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e262      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000aaa:	4b88      	ldr	r3, [pc, #544]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f0      	bne.n	8000a98 <HAL_RCC_OscConfig+0x2d0>
 8000ab6:	e000      	b.n	8000aba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d060      	beq.n	8000b88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d005      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x310>
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2b0c      	cmp	r3, #12
 8000ad0:	d119      	bne.n	8000b06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d116      	bne.n	8000b06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ad8:	4b7c      	ldr	r3, [pc, #496]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d005      	beq.n	8000af0 <HAL_RCC_OscConfig+0x328>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e23f      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000af0:	4b76      	ldr	r3, [pc, #472]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	061b      	lsls	r3, r3, #24
 8000afe:	4973      	ldr	r1, [pc, #460]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b00:	4313      	orrs	r3, r2
 8000b02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b04:	e040      	b.n	8000b88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d023      	beq.n	8000b56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a6e      	ldr	r2, [pc, #440]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b1a:	f7ff fd03 	bl	8000524 <HAL_GetTick>
 8000b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b20:	e008      	b.n	8000b34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b22:	f7ff fcff 	bl	8000524 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d901      	bls.n	8000b34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000b30:	2303      	movs	r3, #3
 8000b32:	e21d      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b34:	4b65      	ldr	r3, [pc, #404]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f0      	beq.n	8000b22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b40:	4b62      	ldr	r3, [pc, #392]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	061b      	lsls	r3, r3, #24
 8000b4e:	495f      	ldr	r1, [pc, #380]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b50:	4313      	orrs	r3, r2
 8000b52:	604b      	str	r3, [r1, #4]
 8000b54:	e018      	b.n	8000b88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b56:	4b5d      	ldr	r3, [pc, #372]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a5c      	ldr	r2, [pc, #368]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b62:	f7ff fcdf 	bl	8000524 <HAL_GetTick>
 8000b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b68:	e008      	b.n	8000b7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b6a:	f7ff fcdb 	bl	8000524 <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e1f9      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b7c:	4b53      	ldr	r3, [pc, #332]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f0      	bne.n	8000b6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d03c      	beq.n	8000c0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d01c      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bac:	f7ff fcba 	bl	8000524 <HAL_GetTick>
 8000bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bb2:	e008      	b.n	8000bc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bb4:	f7ff fcb6 	bl	8000524 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d901      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e1d4      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bc6:	4b41      	ldr	r3, [pc, #260]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0ef      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x3ec>
 8000bd4:	e01b      	b.n	8000c0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bdc:	4a3b      	ldr	r2, [pc, #236]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000be6:	f7ff fc9d 	bl	8000524 <HAL_GetTick>
 8000bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bee:	f7ff fc99 	bl	8000524 <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e1b7      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c00:	4b32      	ldr	r3, [pc, #200]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1ef      	bne.n	8000bee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80a6 	beq.w	8000d68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10d      	bne.n	8000c48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c30:	4a26      	ldr	r2, [pc, #152]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c44:	2301      	movs	r3, #1
 8000c46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <HAL_RCC_OscConfig+0x508>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d118      	bne.n	8000c86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c54:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <HAL_RCC_OscConfig+0x508>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd0 <HAL_RCC_OscConfig+0x508>)
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c60:	f7ff fc60 	bl	8000524 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c68:	f7ff fc5c 	bl	8000524 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e17a      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_RCC_OscConfig+0x508>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f0      	beq.n	8000c68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d108      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x4d8>
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000c9e:	e029      	b.n	8000cf4 <HAL_RCC_OscConfig+0x52c>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b05      	cmp	r3, #5
 8000ca6:	d115      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x50c>
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cae:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cbe:	4a03      	ldr	r2, [pc, #12]	@ (8000ccc <HAL_RCC_OscConfig+0x504>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000cc8:	e014      	b.n	8000cf4 <HAL_RCC_OscConfig+0x52c>
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40007000 	.word	0x40007000
 8000cd4:	4b9c      	ldr	r3, [pc, #624]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cda:	4a9b      	ldr	r2, [pc, #620]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000cdc:	f023 0301 	bic.w	r3, r3, #1
 8000ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000ce4:	4b98      	ldr	r3, [pc, #608]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cea:	4a97      	ldr	r2, [pc, #604]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000cec:	f023 0304 	bic.w	r3, r3, #4
 8000cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d016      	beq.n	8000d2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fc12 	bl	8000524 <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d02:	e00a      	b.n	8000d1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d04:	f7ff fc0e 	bl	8000524 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e12a      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0ed      	beq.n	8000d04 <HAL_RCC_OscConfig+0x53c>
 8000d28:	e015      	b.n	8000d56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fbfb 	bl	8000524 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d30:	e00a      	b.n	8000d48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d32:	f7ff fbf7 	bl	8000524 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e113      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d48:	4b7f      	ldr	r3, [pc, #508]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1ed      	bne.n	8000d32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d56:	7ffb      	ldrb	r3, [r7, #31]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d105      	bne.n	8000d68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d5c:	4b7a      	ldr	r3, [pc, #488]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d60:	4a79      	ldr	r2, [pc, #484]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 80fe 	beq.w	8000f6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	f040 80d0 	bne.w	8000f1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000d7c:	4b72      	ldr	r3, [pc, #456]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0203 	and.w	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d130      	bne.n	8000df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d127      	bne.n	8000df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d11f      	bne.n	8000df2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000dbc:	2a07      	cmp	r2, #7
 8000dbe:	bf14      	ite	ne
 8000dc0:	2201      	movne	r2, #1
 8000dc2:	2200      	moveq	r2, #0
 8000dc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d113      	bne.n	8000df2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d109      	bne.n	8000df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	3b01      	subs	r3, #1
 8000dec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d06e      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2b0c      	cmp	r3, #12
 8000df6:	d069      	beq.n	8000ecc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000df8:	4b53      	ldr	r3, [pc, #332]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000e04:	4b50      	ldr	r3, [pc, #320]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e0ad      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000e14:	4b4c      	ldr	r3, [pc, #304]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000e1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000e20:	f7ff fb80 	bl	8000524 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e28:	f7ff fb7c 	bl	8000524 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e09a      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e3a:	4b43      	ldr	r3, [pc, #268]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f0      	bne.n	8000e28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e46:	4b40      	ldr	r3, [pc, #256]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	4b40      	ldr	r3, [pc, #256]	@ (8000f4c <HAL_RCC_OscConfig+0x784>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000e56:	3a01      	subs	r2, #1
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	4311      	orrs	r1, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e60:	0212      	lsls	r2, r2, #8
 8000e62:	4311      	orrs	r1, r2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000e68:	0852      	lsrs	r2, r2, #1
 8000e6a:	3a01      	subs	r2, #1
 8000e6c:	0552      	lsls	r2, r2, #21
 8000e6e:	4311      	orrs	r1, r2
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000e74:	0852      	lsrs	r2, r2, #1
 8000e76:	3a01      	subs	r2, #1
 8000e78:	0652      	lsls	r2, r2, #25
 8000e7a:	4311      	orrs	r1, r2
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000e80:	0912      	lsrs	r2, r2, #4
 8000e82:	0452      	lsls	r2, r2, #17
 8000e84:	430a      	orrs	r2, r1
 8000e86:	4930      	ldr	r1, [pc, #192]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a2d      	ldr	r2, [pc, #180]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e98:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ea2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000ea4:	f7ff fb3e 	bl	8000524 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eac:	f7ff fb3a 	bl	8000524 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e058      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ebe:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f0      	beq.n	8000eac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000eca:	e050      	b.n	8000f6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e04f      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d148      	bne.n	8000f6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a19      	ldr	r2, [pc, #100]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ef2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000ef4:	f7ff fb16 	bl	8000524 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000efc:	f7ff fb12 	bl	8000524 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e030      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x734>
 8000f1a:	e028      	b.n	8000f6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2b0c      	cmp	r3, #12
 8000f20:	d023      	beq.n	8000f6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <HAL_RCC_OscConfig+0x780>)
 8000f28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2e:	f7ff faf9 	bl	8000524 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f34:	e00c      	b.n	8000f50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff faf5 	bl	8000524 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d905      	bls.n	8000f50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e013      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <HAL_RCC_OscConfig+0x7b0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1ec      	bne.n	8000f36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_RCC_OscConfig+0x7b0>)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	4905      	ldr	r1, [pc, #20]	@ (8000f78 <HAL_RCC_OscConfig+0x7b0>)
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_RCC_OscConfig+0x7b4>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	60cb      	str	r3, [r1, #12]
 8000f68:	e001      	b.n	8000f6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	feeefffc 	.word	0xfeeefffc

08000f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e0e7      	b.n	8001164 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f94:	4b75      	ldr	r3, [pc, #468]	@ (800116c <HAL_RCC_ClockConfig+0x1ec>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d910      	bls.n	8000fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa2:	4b72      	ldr	r3, [pc, #456]	@ (800116c <HAL_RCC_ClockConfig+0x1ec>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 0207 	bic.w	r2, r3, #7
 8000faa:	4970      	ldr	r1, [pc, #448]	@ (800116c <HAL_RCC_ClockConfig+0x1ec>)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800116c <HAL_RCC_ClockConfig+0x1ec>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d001      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0cf      	b.n	8001164 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d010      	beq.n	8000ff2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	4b66      	ldr	r3, [pc, #408]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d908      	bls.n	8000ff2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe0:	4b63      	ldr	r3, [pc, #396]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4960      	ldr	r1, [pc, #384]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d04c      	beq.n	8001098 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d107      	bne.n	8001016 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001006:	4b5a      	ldr	r3, [pc, #360]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d121      	bne.n	8001056 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e0a6      	b.n	8001164 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d107      	bne.n	800102e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101e:	4b54      	ldr	r3, [pc, #336]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d115      	bne.n	8001056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e09a      	b.n	8001164 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d107      	bne.n	8001046 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001036:	4b4e      	ldr	r3, [pc, #312]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e08e      	b.n	8001164 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001046:	4b4a      	ldr	r3, [pc, #296]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e086      	b.n	8001164 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001056:	4b46      	ldr	r3, [pc, #280]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f023 0203 	bic.w	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4943      	ldr	r1, [pc, #268]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001064:	4313      	orrs	r3, r2
 8001066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001068:	f7ff fa5c 	bl	8000524 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106e:	e00a      	b.n	8001086 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001070:	f7ff fa58 	bl	8000524 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e06e      	b.n	8001164 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001086:	4b3a      	ldr	r3, [pc, #232]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 020c 	and.w	r2, r3, #12
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	429a      	cmp	r2, r3
 8001096:	d1eb      	bne.n	8001070 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d010      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	4b31      	ldr	r3, [pc, #196]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d208      	bcs.n	80010c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	492b      	ldr	r1, [pc, #172]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <HAL_RCC_ClockConfig+0x1ec>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d210      	bcs.n	80010f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d4:	4b25      	ldr	r3, [pc, #148]	@ (800116c <HAL_RCC_ClockConfig+0x1ec>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 0207 	bic.w	r2, r3, #7
 80010dc:	4923      	ldr	r1, [pc, #140]	@ (800116c <HAL_RCC_ClockConfig+0x1ec>)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <HAL_RCC_ClockConfig+0x1ec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d001      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e036      	b.n	8001164 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d008      	beq.n	8001114 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001102:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4918      	ldr	r1, [pc, #96]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d009      	beq.n	8001134 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4910      	ldr	r1, [pc, #64]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001134:	f000 f824 	bl	8001180 <HAL_RCC_GetSysClockFreq>
 8001138:	4602      	mov	r2, r0
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <HAL_RCC_ClockConfig+0x1f0>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	490b      	ldr	r1, [pc, #44]	@ (8001174 <HAL_RCC_ClockConfig+0x1f4>)
 8001146:	5ccb      	ldrb	r3, [r1, r3]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <HAL_RCC_ClockConfig+0x1f8>)
 8001152:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_RCC_ClockConfig+0x1fc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f8cb 	bl	80002f4 <HAL_InitTick>
 800115e:	4603      	mov	r3, r0
 8001160:	72fb      	strb	r3, [r7, #11]

  return status;
 8001162:	7afb      	ldrb	r3, [r7, #11]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40022000 	.word	0x40022000
 8001170:	40021000 	.word	0x40021000
 8001174:	080019fc 	.word	0x080019fc
 8001178:	20000000 	.word	0x20000000
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118e:	4b3e      	ldr	r3, [pc, #248]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001198:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_GetSysClockFreq+0x34>
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	d121      	bne.n	80011f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d11e      	bne.n	80011f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80011b4:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d107      	bne.n	80011d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80011c0:	4b31      	ldr	r3, [pc, #196]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 80011c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e005      	b.n	80011dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80011d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80011dc:	4a2b      	ldr	r2, [pc, #172]	@ (800128c <HAL_RCC_GetSysClockFreq+0x10c>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10d      	bne.n	8001208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d102      	bne.n	80011fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80011f8:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <HAL_RCC_GetSysClockFreq+0x110>)
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	e004      	b.n	8001208 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d101      	bne.n	8001208 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <HAL_RCC_GetSysClockFreq+0x114>)
 8001206:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2b0c      	cmp	r3, #12
 800120c:	d134      	bne.n	8001278 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d003      	beq.n	8001226 <HAL_RCC_GetSysClockFreq+0xa6>
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d003      	beq.n	800122c <HAL_RCC_GetSysClockFreq+0xac>
 8001224:	e005      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001226:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <HAL_RCC_GetSysClockFreq+0x110>)
 8001228:	617b      	str	r3, [r7, #20]
      break;
 800122a:	e005      	b.n	8001238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_RCC_GetSysClockFreq+0x114>)
 800122e:	617b      	str	r3, [r7, #20]
      break;
 8001230:	e002      	b.n	8001238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	617b      	str	r3, [r7, #20]
      break;
 8001236:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	3301      	adds	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	fb03 f202 	mul.w	r2, r3, r2
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x108>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	0e5b      	lsrs	r3, r3, #25
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	3301      	adds	r3, #1
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001278:	69bb      	ldr	r3, [r7, #24]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	@ 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	08001a14 	.word	0x08001a14
 8001290:	00f42400 	.word	0x00f42400
 8001294:	007a1200 	.word	0x007a1200

08001298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_RCC_GetHCLKFreq+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000000 	.word	0x20000000

080012b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80012b4:	f7ff fff0 	bl	8001298 <HAL_RCC_GetHCLKFreq>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	0adb      	lsrs	r3, r3, #11
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	4904      	ldr	r1, [pc, #16]	@ (80012d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	08001a0c 	.word	0x08001a0c

080012dc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	220f      	movs	r2, #15
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <HAL_RCC_GetClockConfig+0x60>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0207 	and.w	r2, r3, #7
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	40022000 	.word	0x40022000

08001340 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800134c:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001358:	f7ff f9d2 	bl	8000700 <HAL_PWREx_GetVoltageRange>
 800135c:	6178      	str	r0, [r7, #20]
 800135e:	e014      	b.n	800138a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001364:	4a24      	ldr	r2, [pc, #144]	@ (80013f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136a:	6593      	str	r3, [r2, #88]	@ 0x58
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001378:	f7ff f9c2 	bl	8000700 <HAL_PWREx_GetVoltageRange>
 800137c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	4a1d      	ldr	r2, [pc, #116]	@ (80013f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001388:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001390:	d10b      	bne.n	80013aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b80      	cmp	r3, #128	@ 0x80
 8001396:	d919      	bls.n	80013cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2ba0      	cmp	r3, #160	@ 0xa0
 800139c:	d902      	bls.n	80013a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800139e:	2302      	movs	r3, #2
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	e013      	b.n	80013cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	e010      	b.n	80013cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b80      	cmp	r3, #128	@ 0x80
 80013ae:	d902      	bls.n	80013b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80013b0:	2303      	movs	r3, #3
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e00a      	b.n	80013cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b80      	cmp	r3, #128	@ 0x80
 80013ba:	d102      	bne.n	80013c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80013bc:	2302      	movs	r3, #2
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	e004      	b.n	80013cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b70      	cmp	r3, #112	@ 0x70
 80013c6:	d101      	bne.n	80013cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80013c8:	2301      	movs	r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 0207 	bic.w	r2, r3, #7
 80013d4:	4909      	ldr	r1, [pc, #36]	@ (80013fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d001      	beq.n	80013ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40022000 	.word	0x40022000

08001400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e049      	b.n	80014a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f841 	bl	80014ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3304      	adds	r3, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f000 f9e0 	bl	8001804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d001      	beq.n	80014dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e04f      	b.n	800157c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2202      	movs	r2, #2
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <HAL_TIM_Base_Start_IT+0xc4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01d      	beq.n	800153a <HAL_TIM_Base_Start_IT+0x76>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001506:	d018      	beq.n	800153a <HAL_TIM_Base_Start_IT+0x76>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1f      	ldr	r2, [pc, #124]	@ (800158c <HAL_TIM_Base_Start_IT+0xc8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_TIM_Base_Start_IT+0x76>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1e      	ldr	r2, [pc, #120]	@ (8001590 <HAL_TIM_Base_Start_IT+0xcc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00e      	beq.n	800153a <HAL_TIM_Base_Start_IT+0x76>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <HAL_TIM_Base_Start_IT+0xd0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d009      	beq.n	800153a <HAL_TIM_Base_Start_IT+0x76>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <HAL_TIM_Base_Start_IT+0xd4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d004      	beq.n	800153a <HAL_TIM_Base_Start_IT+0x76>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	@ (800159c <HAL_TIM_Base_Start_IT+0xd8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d115      	bne.n	8001566 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b06      	cmp	r3, #6
 800154a:	d015      	beq.n	8001578 <HAL_TIM_Base_Start_IT+0xb4>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001552:	d011      	beq.n	8001578 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001564:	e008      	b.n	8001578 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0201 	orr.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e000      	b.n	800157a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40012c00 	.word	0x40012c00
 800158c:	40000400 	.word	0x40000400
 8001590:	40000800 	.word	0x40000800
 8001594:	40000c00 	.word	0x40000c00
 8001598:	40013400 	.word	0x40013400
 800159c:	40014000 	.word	0x40014000
 80015a0:	00010007 	.word	0x00010007

080015a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d020      	beq.n	8001608 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01b      	beq.n	8001608 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0202 	mvn.w	r2, #2
 80015d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8e9 	bl	80017c6 <HAL_TIM_IC_CaptureCallback>
 80015f4:	e005      	b.n	8001602 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f8db 	bl	80017b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f8ec 	bl	80017da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	2b00      	cmp	r3, #0
 8001610:	d020      	beq.n	8001654 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01b      	beq.n	8001654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0204 	mvn.w	r2, #4
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2202      	movs	r2, #2
 800162a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f8c3 	bl	80017c6 <HAL_TIM_IC_CaptureCallback>
 8001640:	e005      	b.n	800164e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f8b5 	bl	80017b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8c6 	bl	80017da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d020      	beq.n	80016a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f06f 0208 	mvn.w	r2, #8
 8001670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2204      	movs	r2, #4
 8001676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f89d 	bl	80017c6 <HAL_TIM_IC_CaptureCallback>
 800168c:	e005      	b.n	800169a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f88f 	bl	80017b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f8a0 	bl	80017da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d020      	beq.n	80016ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01b      	beq.n	80016ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 0210 	mvn.w	r2, #16
 80016bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2208      	movs	r2, #8
 80016c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f877 	bl	80017c6 <HAL_TIM_IC_CaptureCallback>
 80016d8:	e005      	b.n	80016e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f869 	bl	80017b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f87a 	bl	80017da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00c      	beq.n	8001710 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0201 	mvn.w	r2, #1
 8001708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7fe fdb6 	bl	800027c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001716:	2b00      	cmp	r3, #0
 8001718:	d104      	bne.n	8001724 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f913 	bl	8001964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00c      	beq.n	8001762 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800175a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f90b 	bl	8001978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00c      	beq.n	8001786 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800177e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f834 	bl	80017ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00c      	beq.n	80017aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f06f 0220 	mvn.w	r2, #32
 80017a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f8d3 	bl	8001950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a46      	ldr	r2, [pc, #280]	@ (8001930 <TIM_Base_SetConfig+0x12c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <TIM_Base_SetConfig+0x40>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001822:	d00f      	beq.n	8001844 <TIM_Base_SetConfig+0x40>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a43      	ldr	r2, [pc, #268]	@ (8001934 <TIM_Base_SetConfig+0x130>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00b      	beq.n	8001844 <TIM_Base_SetConfig+0x40>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a42      	ldr	r2, [pc, #264]	@ (8001938 <TIM_Base_SetConfig+0x134>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <TIM_Base_SetConfig+0x40>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a41      	ldr	r2, [pc, #260]	@ (800193c <TIM_Base_SetConfig+0x138>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d003      	beq.n	8001844 <TIM_Base_SetConfig+0x40>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a40      	ldr	r2, [pc, #256]	@ (8001940 <TIM_Base_SetConfig+0x13c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d108      	bne.n	8001856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800184a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a35      	ldr	r2, [pc, #212]	@ (8001930 <TIM_Base_SetConfig+0x12c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01f      	beq.n	800189e <TIM_Base_SetConfig+0x9a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001864:	d01b      	beq.n	800189e <TIM_Base_SetConfig+0x9a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a32      	ldr	r2, [pc, #200]	@ (8001934 <TIM_Base_SetConfig+0x130>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d017      	beq.n	800189e <TIM_Base_SetConfig+0x9a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a31      	ldr	r2, [pc, #196]	@ (8001938 <TIM_Base_SetConfig+0x134>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <TIM_Base_SetConfig+0x9a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a30      	ldr	r2, [pc, #192]	@ (800193c <TIM_Base_SetConfig+0x138>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00f      	beq.n	800189e <TIM_Base_SetConfig+0x9a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a2f      	ldr	r2, [pc, #188]	@ (8001940 <TIM_Base_SetConfig+0x13c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00b      	beq.n	800189e <TIM_Base_SetConfig+0x9a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a2e      	ldr	r2, [pc, #184]	@ (8001944 <TIM_Base_SetConfig+0x140>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <TIM_Base_SetConfig+0x9a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a2d      	ldr	r2, [pc, #180]	@ (8001948 <TIM_Base_SetConfig+0x144>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d003      	beq.n	800189e <TIM_Base_SetConfig+0x9a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a2c      	ldr	r2, [pc, #176]	@ (800194c <TIM_Base_SetConfig+0x148>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d108      	bne.n	80018b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a16      	ldr	r2, [pc, #88]	@ (8001930 <TIM_Base_SetConfig+0x12c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d00f      	beq.n	80018fc <TIM_Base_SetConfig+0xf8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a18      	ldr	r2, [pc, #96]	@ (8001940 <TIM_Base_SetConfig+0x13c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00b      	beq.n	80018fc <TIM_Base_SetConfig+0xf8>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <TIM_Base_SetConfig+0x140>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <TIM_Base_SetConfig+0xf8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a16      	ldr	r2, [pc, #88]	@ (8001948 <TIM_Base_SetConfig+0x144>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d003      	beq.n	80018fc <TIM_Base_SetConfig+0xf8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a15      	ldr	r2, [pc, #84]	@ (800194c <TIM_Base_SetConfig+0x148>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d103      	bne.n	8001904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f023 0201 	bic.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]
  }
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40012c00 	.word	0x40012c00
 8001934:	40000400 	.word	0x40000400
 8001938:	40000800 	.word	0x40000800
 800193c:	40000c00 	.word	0x40000c00
 8001940:	40013400 	.word	0x40013400
 8001944:	40014000 	.word	0x40014000
 8001948:	40014400 	.word	0x40014400
 800194c:	40014800 	.word	0x40014800

08001950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <memset>:
 800198c:	4402      	add	r2, r0
 800198e:	4603      	mov	r3, r0
 8001990:	4293      	cmp	r3, r2
 8001992:	d100      	bne.n	8001996 <memset+0xa>
 8001994:	4770      	bx	lr
 8001996:	f803 1b01 	strb.w	r1, [r3], #1
 800199a:	e7f9      	b.n	8001990 <memset+0x4>

0800199c <__libc_init_array>:
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	4d0d      	ldr	r5, [pc, #52]	@ (80019d4 <__libc_init_array+0x38>)
 80019a0:	4c0d      	ldr	r4, [pc, #52]	@ (80019d8 <__libc_init_array+0x3c>)
 80019a2:	1b64      	subs	r4, r4, r5
 80019a4:	10a4      	asrs	r4, r4, #2
 80019a6:	2600      	movs	r6, #0
 80019a8:	42a6      	cmp	r6, r4
 80019aa:	d109      	bne.n	80019c0 <__libc_init_array+0x24>
 80019ac:	4d0b      	ldr	r5, [pc, #44]	@ (80019dc <__libc_init_array+0x40>)
 80019ae:	4c0c      	ldr	r4, [pc, #48]	@ (80019e0 <__libc_init_array+0x44>)
 80019b0:	f000 f818 	bl	80019e4 <_init>
 80019b4:	1b64      	subs	r4, r4, r5
 80019b6:	10a4      	asrs	r4, r4, #2
 80019b8:	2600      	movs	r6, #0
 80019ba:	42a6      	cmp	r6, r4
 80019bc:	d105      	bne.n	80019ca <__libc_init_array+0x2e>
 80019be:	bd70      	pop	{r4, r5, r6, pc}
 80019c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c4:	4798      	blx	r3
 80019c6:	3601      	adds	r6, #1
 80019c8:	e7ee      	b.n	80019a8 <__libc_init_array+0xc>
 80019ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ce:	4798      	blx	r3
 80019d0:	3601      	adds	r6, #1
 80019d2:	e7f2      	b.n	80019ba <__libc_init_array+0x1e>
 80019d4:	08001a44 	.word	0x08001a44
 80019d8:	08001a44 	.word	0x08001a44
 80019dc:	08001a44 	.word	0x08001a44
 80019e0:	08001a48 	.word	0x08001a48

080019e4 <_init>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	bf00      	nop
 80019e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ea:	bc08      	pop	{r3}
 80019ec:	469e      	mov	lr, r3
 80019ee:	4770      	bx	lr

080019f0 <_fini>:
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	bf00      	nop
 80019f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f6:	bc08      	pop	{r3}
 80019f8:	469e      	mov	lr, r3
 80019fa:	4770      	bx	lr
